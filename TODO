1.
Make variable octave starting positions as an input param to the octave class. Currently octaves first note is C and adjust
chord parsing according to inital note. This will essentially change the octave class into a set of chromatic scales in which
all scales and chords can be built from.

2.
Add MIDI output through MidiUtils module. The program will simply view the piano as a list of 12 binary switches (12 bits).
i.e. [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0] where the first index list[0] implicitly represents middle C, list[1] represents C#,
list[2] represents and so fourth (currently of an arbitrary octave). 

Thus the list above represents the chord of C major, as C aka list [0] is switched on, E aka list[4] is switched on and G aka list[7] 
is switched on. Must to find a way to parse this list such that it can be used to generate chords through the MidiUtils module.

4. Implement the physical frequencies of chords and notes such that sinusoidal waveforms can be generated for the sounds. 
This will require various octaves instead of the currently arbitrary one.

3. A nice general idea may be to correlate the frequency of notes to that of visual light.
Visualising: outputting a sequence of chords to a visual representation. There are obvious patterns within the act of
deriving and manipulating chords that can be immediately seen through this binary list. For instance, to derive inverted chords
from a C major chord, we can augment the chord by one semitone repeatedly. 

A visual way to represent chords. 
1. @ denotes the root note of the chord
2. The first note in the array goes on the far left.

notation: C(3,2) = C major = C(3,2)G = C(3,2)G 

The numbers simply represent the numbers of 0s in between each one read from the first most left most one.

Generically a chord of the form: (3,2) chord is a major chord | (2,3) chord is a minor chord | 
(3,3) chord is an augmented chord | (2,2) chord is a diminished chord | ...

the spacing carries the information of chord type :: e.g. (3,2) is a major chord because

For instance, take the initial chord of C minor (C, Eb, G bits switched on) below the piano representation.

{_, #, _, #, _, _, #, _, #, _, #, _) sharp is hash (high bar), regular note is low bar (ignore flats)
{C, C, D, D, E, F, F, G, G, A, A, B}
------------------------------------
[1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0]  @C(2,3)
Translating up x semitones...
[0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0]  @C#(2,3) 
[0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0]  @D(2,3)
[0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0]  @D#(2,3)
[0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1]  @E(2,3)
[1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0]  C(4,2)@F (F first inversion)  
[0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0]  C#(4,2)@F#
[0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0]  C#(4,2)@F#
[0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1]  C#(4,2)@F#
[1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0] 
[0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0]  
[0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1] 
[1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0]
...



